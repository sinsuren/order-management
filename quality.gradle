buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies { classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1" }
}


apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'jacoco'
apply plugin: org.sonarqube.gradle.SonarQubePlugin

jacoco {
    toolVersion = '0.7.5.201505241946'
    reportsDir = file('${buildDir}/reports/jacoco')
}

jacocoTestReport {

    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    classDirectories = files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                '**/*Exception.class'
        ])
    })
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

def subCoberturaFiles = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }

// See https://github.com/stevesaliman/gradle-cobertura-plugin/blob/master/usage.md
cobertura {
    coverageFormats = [ 'xml', 'html' ]
    coverageIgnoreTrivial = true
    coverageIgnores = ['.LOGGER.*']
    coverageReportDir = new File('${buildDir}/reports/cobertura')

    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = subCoberturaFiles

    // By default, Cobertura picks up tasks of type:Test.
    // So, integrationTest comes under this purview as well.
    // We explicitly choose unit tests only for coverage here
    // as we can't run integration tests on this code base
    // See https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskCollection.html
    // for documentation on extracting a TaskCollection instance
    coverageTestTasks { tasks.matching { it.name.equals('test') } }
}
//TODO: Uncomment this when we've cleaned up the fake error messages
//test.finalizedBy(project.tasks.cobertura)

test.dependsOn(subprojects.test)

tasks.withType(FindBugs) {
    reports {
        xml.enabled = propertyOr('findbugsXmlReport', false)
        xml.withMessages = true
        html.enabled = !xml.enabled
    }
}

findbugsMain {
    excludeFilter file("${rootDir}/config/findbugs/findbugs-exclude-filter.xml")
}

findbugsTest {
    excludeFilter file("${rootDir}/config/findbugs/findbugs-exclude-filter.xml")
}

//findbugsIntegrationTest {
//    excludeFilter file("${rootDir}/config/findbugs/findbugs-exclude-filter.xml")
//}

checkstyle {

    //This is used to set the path of suppressions.xml within checkstyle.xml
    configProperties = [sameDir: "${rootDir}/config/checkstyle"]
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")

}

task checkstyleAll(dependsOn: [checkstyleMain, checkstyleTest]) { //, checkstyleIntegrationTest]) {
}

/*
task checkstyleHtml << {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
            style: file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
            out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
}

checkstyleMain.finalizedBy checkstyleHtml*/


sonarqube {

    //noinspection GroovyAssignabilityCheck
    properties{
        //noinspection GroovyAssignabilityCheck
        property 'sonar.projectName', 'ILIP - kshetra'
        //noinspection GroovyAssignabilityCheck
        property 'sonar.java.coveragePlugin', 'jacoco'
        //noinspection GroovyAssignabilityCheck
        property 'sonar.groovy.jacoco.reportPath', '${buildDir}/jacoco/jacocoTest.exec'
        //noinspection GroovyAssignabilityCheck
        property 'sonar.java.binaries', 'build/classes/main'
        //noinspection GroovyAssignabilityCheck
        property 'sonar.java.test.binaries', 'build/classes/test'
        //noinspection GroovyAssignabilityCheck
        property 'sonar.sources', 'src/main'
        //noinspection GroovyAssignabilityCheck
        property 'sonar.tests', 'src/test'
    }

}
